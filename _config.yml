host: 127.0.0.1
port: 4001
safe: true
baseurl : /tnt-board
api :
    - name : track
      elements :
           - name : Board
             preamble : |
                        Boards are track-based visualizations that can be panned and zoomed making all the tracks in the board to update accordingly. TnT boards can be configured using several methods that affect all the tracks in the board (like the <a href="#width">width</a> of the board). The height of the board is defined by the sum of the <a href="#height">heights</a> of all the tracks. The <i>board</i> instance can be configured using the methods explained below. When used as setters, these methods return the board object itself allowing to chain them as in this example:
             example : |
                 // Definition
                 var myBoard = tnt.board()
                     .from(0)
                     .to(1000)
                     .max(1000)
                     .width(800);

                 myBoard
                     .add_track(track1)
                     .add_track(track2);

                 // Initialisation
                 myBoard(div);

                 // Start
                 myBoard.start();

             elements :
                - name : board
                  path : tnt
                  args : null
                  desc : creates a new track-based board visualization
                  full : Creates a new track-based board visualization that can be configured using the methods explained below. The returned object is also a function that can be called passing a DOM element as its argument. This DOM element is used as a container for the visualization.
                  example : |
                    var myBoard = tnt.board()

                - name : from
                  path : board
                  args : integer
                  desc : defines the left coordinate of the board
                  full : Defines the left coordinate of the board (the start left position). If called without arguments returns the current value.
                  example : |
                    // Using a scalar
                    var myBoard = tnt.board()
                        .from(20);

                    // Using a promise
                    var myBoard2 = tnt.board()
                        .from (new Promise (function (resolve, reject) {
                            resolve (20);
                        }));

                - name : to
                  path : tnt.board
                  args : integer
                  desc : defines the right coordinate of the board
                  full : Defines the right coordinate of the board (the start right position). If called without arguments returns the current value.
                  example : |
                    // Using a scalar
                    var myBoard = tnt.board()
                        .to(1000);

                    // Using a Promise
                    var myBoard2 = tnt.board()
                        .to (new Promise (function (resolve, reject) {
                            resolve (1000);
                        }));

                - name : min
                  path : board
                  args : integer
                  desc : defines the minimum possible coordinate of the board
                  full : Defines the minimum possible coordinate of the board. If called without arguments returns the current limit. By default this value is 0.
                  example : |
                    // Using a scalar
                    var myBoard = tnt.board()
                        .min(100);

                - name : max
                  path : board
                  args : integer
                  desc : defines the maximum possible value of the board
                  full : Defines the upper limit (ie, the maximum possible coordinate) of the board. If called without arguments returns the current upper limit.
                  example : |
                    // Using a scalar
                    var myBoard = tnt.board()
                        .max(1000);

                - name : zoom_out
                  path : board
                  args : integer
                  desc : defines the maximum extent of the board
                  full : Defines the maximum extent of the board (ie, the limit when zooming out). If called without arguments returns the current value. This limit is respected even if the <a href="#from">from</a> and <a href="#to">to</a> coordinates specify spans beyond this limit. In that case, the coordinates are adjusted to satisfy this value.
                  example : |
                    // (to - from) can't be greater than 500
                    var myBoard = tnt.board()
                        .zoom_out(500);

                - name : zoom_in
                  path : board
                  args : integer
                  desc : Defines the minimum extent of the board
                  full : Defines the minimum extent of the board (ie, the limit when zooming in). If called without arguments returns the current value. This limit is respected even if the <a href="#from">from</a> and <a href="#to">to</a> coordinates specify spans beyond this limit. In that case, the coordinates are adjusted to satisfy this value.
                  example : |
                    // (to - from) can't be lower than 100
                    var myBoard = tnt.board()
                        .zoom_in(100);

                - name : start
                  path : board
                  args : null
                  desc : starts (or re-starts) the visualisation
                  full : Starts the visualisation (re-)initialisig all the tracks, resolving the coordinate promises and feeding the tracks with their data and displays.
                  example : |
                    var myBoard = tnt.board()
                        .from(0)
                        .to(1000)
                        .min(0)
                        .max(1000);

                    // ... Adding tracks ...
                    // Initialise the board
                    myBoard.start();

                - name : scroll
                  path : board
                  args : float
                  desc : scrolls the board programmatically
                  full : Scrolls the board programmatically. The argument indicates the number of board <i>pages</i> to scroll, if it is possitive the board scrolls to the right, while if it is negative scrolls to the left. For example, <i>board.scroll(1)</i> scrolls right to the next non-overlapping page, while <i>board.scroll(-0.5)</i> scrolls left overlapping half a page.
                  example : |
                    var myBoard = tnt.board()
                        .from(0)
                        .to(1000)
                        .max(1000);

                    myBoard(div);
                    myBoard.start();
                    myBoard.scroll(-1);

                - name : zoom
                  path : board
                  args : float
                  desc : zooms in/out the track the specified amount
                  full : Zooms in/out the track the specified amount. The argument indicates the number of <i>pages</i> to zoom, or in other words, times of <i>extent</i>. For example, <i>board.zoom(1)</i> does not do anything, <i>board.zoom(0.5)</i> zooms out to double the extent and <i>board.zoom(2)</i> zooms in to half the extent.
                  example : |
                    var myBoard = tnt.board()
                        .from(0)
                        .to(1000)
                        .max(1000);

                        myBoard(div);
                        myBoard.start();
                        myBoard.zoom(2);

                - name : tracks
                  path : board
                  args : array
                  desc : reorders the tracks in the board
                  full : Reorders the tracks in the board. Expects an array of tracks as argument. This method requires the visualisation to have started already. The tracks are re-arranged with the order given in the array. New tracks are created while existing tracks not in the array are removed. As a side effect, the height for each existing tracks is recalculated. If no argument is provided, returns an array containing the current tracks in the board.
                  example : |
                      // Reorder the tracks. First tracks is put last
                      var tracks = myBoard.tracks();
                      var new_tracks = [];
                      new_tracks.push(tracks[0]);
                      new_tracks.push(tracks[2]);
                      new_tracks.push(tracks[1]);

                      myBoard.tracks(new_tracks);

                - name : add_track
                  path : board
                  args : tnt.board.track
                  desc : adds a new track to the track visualisation
                  full : Adds a new track to the track visualisation. The order in which this method is called determines the order of the tracks in the board
                  example : |
                    var myBoard = tnt.board()
                        .add_track(track1)
                        .add_track(track2);

                - name : width
                  path : board
                  args : integer
                  desc : Specifies the width of the board
                  full : Specifies the width of the board. If the width changes after the visualisation has been initialised, the board and all the tracks are re-initialised with the new width. If no argument is provided, the current width is returned.
                  example : |
                    var myBoard = tnt.board()
                        .width (800);


                - name : allow_drag
                  path : board
                  args : boolean
                  desc : specifies if the board can be scrolled with the mouse
                  full : Specifies if the board can be scrolled with the mouse. If set to <i>false</i>, no <i>drag</i> event is used in the board. This method can be set dynamically after the visualisation has started. Disable dragging doesn't disallow scrolling programmatically via board.<a href="#scroll">scroll</a>.
                  example : |
                    var myBoard = tnt.board()
                        .allow_drag = false;

                - name : find_track
                  path : board
                  args : string
                  desc : Finds a track by ID
                  full : Finds a track by ID. It expects the ID of the track as its argument.
                  example : |
                    var myBoard = tnt.board()
                        .from(0)
                        .to(1000);

                    var myTrack = tnt.board.track()
                        .display(...)
                        .data(...)
                        .id("mytrack");

                    var t = myBoard.find_track("mytrack");

           - name : Track
             preamble : |
                Each <a href="#Board">board</a> can contain one of more <i>tracks</i> to display data. They are piled up in the board vertically (growing downwards) in the order of attachment to the board. Tracks are created using the constructor <i>tnt.board.track</i> and attached using board.<a href="#add_track">add_track</a>. Each <i>track</i> instance can be configured using the methods explained below. When used as setters, these methods return the track object allowing to chain them as in this example:
             example : |
                var myBoard = tnt.board()
                    .from(0)
                    .to(500)
                    .min(0)
                    .max(500);

                var locationTrack = tnt.board.track()
                    .height(20)
                    .color("white")
                    .display (tnt.board.track.feature.axis()
                        .orientation("top");
                    );

                var blockTrack = tnt.board.track()
                    .height(30)
                    .color("#FFCFDD")
                    .data (tnt.board.track.data.sync()
                        .retriever (function () {
                            return [{
                                start : 200,
                                end : 350
                            }];
                        })
                    );

                myBoard
                    .add_track (locationTrack)
                    .add_track (blockTrack)

             elements :
                - name : track
                  path : tnt.board
                  args : null
                  desc : creates a new track
                  full : Creates a new track. This track has to be configured via its methods. The newly created track can be attached to the board using board's <a href=#add_track>add_track</a> method.
                  example : |
                      var myBoard = tnt.board().from(0).to(500).max(500);

                      var blockTrack = tnt.board.track()
                          .height(30)
                          .color("#FFCFDD")
                          .data (tnt.board.track.data.sync()
                          .retriever(function () {
                              return [{
                                  start : 200,
                                  end : 350
                              }];
                          })
                      );

                - name : scale
                  path : track
                  args : null
                  desc : returns the scale to transform between the input domain and the output range
                  full : Returns the scale to transform between the input domain and the output range. This scale is needed when elements (specified in the user-space) are <a href="#Display">displayed</a> in the track (pixels-space). See <a href="#feature">feature</a> for an example of use.
                  example : |
                    var scale = myTrack.scale();


                - name : color
                  path : track
                  args : string
                  desc : specifies the background color of the track
                  full : Specifies the background color of the track. Color names ("white") and hexadecimal codes ("#FFFFFF") are allowed. If called without arguments, the current track color is returned.
                  example : |
                    var blockTrack = tnt.board.track()
                        .color("#FFCFDD");

                - name : height
                  path : track
                  args : integer
                  desc : defines the height of the track in pixels
                  full : Defines the height of the track in pixels. If called without arguments, returns the current height. This value can be changed after the visualisation has <i>started</i>, but for the change to be applied to the track, the board.<a href="#tracks">tracks</a> method should be called.
                  example : |
                    var myBoard = tnt.board();
                    var blockTrack = tnt.board.track()
                        .height(30);

                - name : label
                  path : track
                  args : string
                  desc : sets a label to the track
                  full : Sets a label to the track. This label is displayed in the top left corner of the track.
                  example : |
                    var block_track = tnt.board.track()
                        .label("My Data");

                - name : id
                  path : track
                  args : string
                  desc : sets an ID for the track
                  full : Sets an ID for the track. Uniqueness of track IDs is required in order to avoid unexpected results. Any track missing an ID when the tracks are initialised are assigned a numerical ID starting with "1". This means that explicitely giving low numerical IDs to tracks is not recommended to allow ID collisions. If called without arguments, returns the current ID of the track.
                  example : |
                    var track = tnt.board.track()
                        .data(...)
                        .display(...)
                        .id("mytrack");

                    var trackID = track.id(); // "mytrack"

           - name : Data
             preamble : |
                Tracks need data to display. TnT provides two generic methods to fetch it: tnt.board.data.<a href="#sync">sync</a>, which pulls data into the track <i>synchronously</i> and  tnt.board.data.<a href="#async">async</a>, which relies on <i>Promises</i> to fetch the data <i>asynchronously</i>. Both methods offer the same interface and share the same configuration methods. If called without arguments, the current data retriever is returned.
             example : |
               var dataSync = tnt.board.data.sync()
                    .retriever (function () {
                        return [
                            {
                                start : 200,
                                end   : 350
                            }
                        ];
                    });

               // Presumes that a Promise library is imported
                var dataAsync = tnt.board.data.async()
                    .retriever (function () {
                        return new Promise (function (resolve, reject) {
                            resolve ([
                                {
                                    start : 200,
                                    end : 350
                                }
                            ])
                        });
                    });

                var track1 = tnt.board.track()
                    .data(dataSync);

                var track2 = tnt.board.track()
                    .data(dataAsync);

             elements :
                - name : data
                  path : track
                  args : null
                  desc : specifies a new data retriever for the track.
                  full : Specifies a new data retriever for the track. This is used on every board <i>update</i> to retrieve new data to <a href="#Display">display</a>
                  example : |
                    var track = tnt.board.track()
                        .data (data);

                - name : sync
                  path : tnt.board.data
                  args : null
                  desc : specifies a synchronous data retriever
                  full : Specifies a synchronous data retriever.
                  example : |
                    var dataSync = tnt.board.data.sync()
                        .retriever (function () {
                            return [
                                {
                                    start : 200,
                                    end   : 350
                                }
                            ];
                        });

                - name : async
                  path : tnt.board.data
                  args : null
                  desc : specifies an asynchronous data retriever
                  full : Specifies an asynchronous data retriever.
                  example : |
                    // Presumes that a Promise library is imported
                    var dataAsync = tnt.board.data.async()
                        .retriever (function () {
                            return new Promise (function (resolve, reject) {
                                resolve ([
                                    {
                                        start : 200,
                                        end : 350
                                    }
                                ])
                            });
                        });
                - name : empty
                  path : tnt.board.data
                  args : null
                  desc : convenience data object for tracks that doesn't require data
                  full : Convenience data object for tracks that doesn't require data.
                  example : |
                    var track = tnt.board.track()
                        .data(tnt.board.track.data.empty());

                - name : retriever
                  path : data
                  args : callback
                  desc : callback that retrieves the data to visualise
                  full : Callback that retrieves the data to visualise. This callback is called passing the location object to allow contextual data retrievals. This location object has the <i>from</i> and <i>to</i> properties. The callback is expected to return an array of objects (if the <a href="#data"> is <a href="#sync">sync</a>) or a <i>Promise</i> that resolves to an array of objects (if the <a href="#data">data</a> is <a href="#async">async</a>). These objects represent the elements to be <a href="#display">displayed</a> in each update of the <a href="#board">board</a>
                  example : |
                    var dataSync = tnt.board.data.sync()
                        .retriever (function () {
                            return [
                                {
                                    start : 200,
                                    end   : 350
                                }
                            ];
                        });

                - name : elements
                  path : data
                  args : null
                  desc : gets the elements that resulted from the last retrieval
                  full : Gets the elements that resulted from the last retrieval. Normally, there is no need to call this method directly since it is called implicitely by the <a href="#display">display</a> instance. It is useful if the data needs to be edited before being passed to the <a href="#display">display</a>
                  example : |
                    var elems = dataSync.elements();

           - name : Display
             preamble : |
               Once a <a href="#Track">track</a> has retrieved its data, it needs to <i>display</i> it. TnT provides several ready-to-use <i>features</i> that can be "plugged" in the <a href="#Track">track</a> (see for example tnt.board.track.feature.<a href="#block">block</a> or tnt.board.track.feature.<a href="#pin">pin</a>) using its <a href="#display">display</a> method. These ready-to-use <i>features</i> are based on the generic <a href="#feature">feature</a> interface and hence "inherit" all the methods described for the generic tnt.board.track.<a href="#feature">feature</a> interface. Creating custom <i>features</i> is also possble using the generic interface.<br />
               <br />
               Each <i>displayer</i> is composed of one or more <i>features</i>. A displayer with more that one <i>feature</i> can be used to display different type of <a href="#Data">data</a> in the same <a href="#Track">track</a> (see tnt.board.track.feature.<a href="#composite">), for an example).
             example : |
               var axis_track = tnt.board.track()
                   .height(20)
                   .color("white")
                   .display(tnt.board.track.feature.axis()
                       .orientation("top")
                   );

               var block_track = tnt.board.track()
                   .height(30)
                   .color("#FFCFDD")
                   .data (tnt.board.track.data.sync()
                       .retriever (function () {
                           return [
                               {
                                   start : 200,
                                   end   : 350
                               }
                           ];
                       })
                   )
                   .display(tnt.board.track.feature.block()
                       .color("blue")
                   );

             elements :
                - name : display
                  path : track
                  args : null
                  desc : specifies a new data displayer for the track
                  full : Specifies a new data displayer for the track. This is used everytime new <a href="#Data">data</a> is available for the track. If called without arguments, the current <i>displayer</i> is returned.
                  example : |
                    var track = tnt.board.track()
                        .display (feature);

                - name : feature
                  path : tnt.board.track
                  args : null
                  desc : general interface for creating <i>features</i>
                  full : General interface for creating <i>features</i>. This interface exposes four methods to configure the feature, <a href="#create">create</a>, <a href="#mover">mover</a>, <a href="#update">update</a> and <a href="#guider">guider</a>. These methods can be used to create new features and rely heavily on the <a href="d3js.org"d3</a> library. TnT Board also offers several ready-to-use features built on top of this general interface
                  example : |
                    var vline_feature = function () {
                        var feature = tnt.board.track.feature();

                        feature.create (function (new_elems) {
                            var track = this;
                            var xScale = track.scale();
                            new_elems
                                .append("line")
                                .attr("x1", function (d) {
                                    return xScale(d.pos);
                                })
                                .attr("x2", function (d) {
                                    return xScale(pos.d);
                                })
                                .attr("y1", 0)
                                .attr("y2", track.height())
                                .attr("stroke", feature.color());
                        });

                        feature.mover (function (vlines) {
                            select("line")
                                .attr("x1", function (d) {
                                    return xScale(d.pos);
                                })
                                .attr("x2", function (d) {
                                    return xScale(d.pos);
                                })
                        });

                        return feature;
                    }

                - name : create
                  path : feature
                  args : callback
                  desc : specifies how new elements are displayed
                  full : Specifies how new elements are displayed. Accepts a callback that is called with a <a href="https://github.com/mbostock/d3/wiki/Selections">d3 selection</a> containing the new elements on every data update. In of this function, <i>this</i> is set to the current <a href="#Track">track</a>. When this method is called without arguments returns the current <i>create</i> function.
                  example :
                    var vline_feature = function () {
                        var feature = tnt.board.track.feature();

                        feature.create (function (new_elems) {
                            var track = this;
                            var xScale = track.scale();
                            new_elems
                                .append("line")
                                .attr("x1", function (d) {
                                    return xScale(d.pos);
                                })
                                .attr("x2", function (d) {
                                    return xScale(pos.d);
                                })
                                .attr("y1", 0)
                                .attr("y2", track.height())
                                .attr("stroke", feature.color());
                        });

                - name : mover
                  path : feature
                  args : callback
                  desc : specifies how the elements are <i>moved</i> when the board is dragged
                  full : Specifies how the elements are <i>moved</i> when the board is dragged. Accepts a callback that is called with the current elements in the track. In of this function, <i>this</i> is set to the current <a href="#Track">track</a>. When this method is called without arguments returns the current <i>mover</i> function.
                  examples :
                    var vline_feature = function () {
                        var feature = tnt.board.track.feature();

                        feature.mover (function (vlines) {
                            select("line")
                                .attr("x1", function (d) {
                                    return xScale(d.pos);
                                })
                                .attr("x2", function (d) {
                                    return xScale(d.pos);
                                })
                        });

                - name : updater
                  path : feature
                  args : callback


                - name : guider
                  path : feature
                  args : callback
                  desc : sets a callback to display non-scaled elements in the <a href="#Display">display</a>
                  full : Sets a callback to display non-scaled elements in the <a href="#Display">display</a>. There are cases where the <a href="#Track">track</a> needs to dispay non-scaled visual elements (rulers, baselines, etc). The method specified with this callback is called on <a href="#Display">display</a> initialisation passing the <a href="#Board">board</a>'s <a href="#width">width</a> as its argument. In this function, <i>this</i> is set to the current <a href="#Track">track</a>. When called without arguments this method return the current <i>guider</i> function.


                - name : index
                  path : feature
                  args : callback
                  desc : specifies an <i>index</i> function to link elements between successive track updates
                  full : Specifies an <i>index</i> function to link elements between successive track updates. When a <a href="#Track">track</a> is updated and the new <a href="#Data">data</a> is retrieved, the <a href="#Display">display</a> needs to know which elements are new, which have dissapeared and which are currently in the display. These <i>binding</i> of elements is made before the new data is displayed and is based on this function. This function is called on every (new & old) element passing the element object as its argument. Elements for which the <i>index</i> function returns the same value are linked or bound together. By default data are linked based on their position in the data array.
                  example : |
                    // Data track
                    var pin_track = tnt.board.track()
                        .height(60)
                        .color("white")
                        .display (tnt.board.track.feature.pin()
                            // Elements having the same "pos" attribute are linked between data updates
                            .index (function (d) {
                                return d.pos;
                            })
                            .domain([0.3, 1.2])
                            .color("red")
                        )
                        .data (tnt.board.track.data.sync()
                            retriever (function (loc) {
                                var elems = [];
                                var data = pins_data;
                                for (var i=0; i<data.length; i++) {
                                    if ((data[i].pos > loc.from) && (data[i].pos < loc.to)) {
                                        elems.push(data[i]);
                                    }
                                }
                                return elems;
                            })
                        );

                - name : color
                  path : display
                  args : string
                  desc : specifies the foreground color of the elements to display
                  full : Specifies the foreground color of the elements to display in the track. Color names ("red") and hexadecimal codes ("00FF00") are allowed. If called without arguments, the current color is returned. By default all elements are black.
                  example : |
                    var display = tnt.board.track.feature()
                        .color("red");

                - name : location
                  path : tnt.board.track.feature
                  args : null
                  desc : creates a new location feature for a track
                  full : Creates a new location feature for a track. This is a data-less display that shows the current range of the board in the track
                  example : |
                   var location_track = tnt.board.track()
                       .color("white")
                       .display(tnt.board.track.feature.location());

                - name : axis
                  path : tnt.board.track.feature
                  args : null
                  desc : creates a new axis feature for a track
                  full : Creates a new axis feature for a track. This is a data-less display that shows the x-axis of the plot in the track
                  example : |
                   var axis_track = tnt.board.track()
                       .height(20)
                       .color("white")
                       .display(tnt.board.track.feature.axis()
                           .orientation("top")
                       );

                - name : orientation
                  path : axis
                  args : string
                  desc : sets the orientation of a tnt.board.track.feature.<a href="#axis">axis</a> feature.
                  full : Sets the orientation of a tnt.board.track.feature.<a href="#axis">axis</a> feature. It accepts a string as argument that can be either "top" or "bottom"

                - name : block
                  path : tnt.board.track.feature
                  args : null
                  desc : creates a new block-based feature for a track
                  full : Creates a new block-based feature for a track. This feature expects the data as an array of objects containing numerical <i>start</i> and <i>end</i> properties, although the name of the properties is configurable.
                  example : |
                   var block_track = tnt.board.track()
                       .height(30)
                       .color("#FFCFDD")
                       .data (tnt.board.track.data.sync()
                           .retriever (function () {
                               return [
                                   {
                                       start : 200,
                                       end   : 350
                                   }
                               ];
                           })
                       )
                       .display(tnt.board.track.feature.block()
                           .color("blue")
                       );

                - name : pin
                  path : tnt.board.track.feature
                  args : null
                  desc : creates a new pin-based feature for a track.
                  full : Creates a new pin-based feature for a track. This feature expects the data as an array of objects containing numerical <i>pos</i> and <i>val</i> properties, although the name of the properties is configurable. The <i>pos</i> property refers to its x-position in the track and the <i>val</i> property refers to the height of the pin in the <a href="#Track">track</a> and expects a number in the <i>y</i> <a href="#domain">domain</a> (by default, between 0 and 1).
                  example : |
                    var pin_track = tnt.board.track()
                        .display (tnt.board.trac.feature.pin())
                        .data (tnt.board.track.data.sync()
                            .retriever (function () {
                                return [
                                    {pos : 200, val: 0.5},
                                    {pos : 355, val: 0.8}
                                ];
                            })
                        );

                - name : domain
                  path : pin
                  args : array
                  desc : sets the <i>domain</i> for the y-axis in the tnt.board.track.feature.<a href="#pin">pins</a> feature
                  full : Sets the <i>domain</i> for the y-axis in the tnt.board.track.feature.<a href="#pin">pins</a> feature. It expects an array of numerical values representing the lower and upper limit respectively for the <i>y-axis</i>. By default the domain is [0,1]. Called without arguments return the current domain.
                  example : |
                    var pin_track = tnt.board.track()
                        .display (tnt.board.trac.feature.pin()
                            .domain([0.3, 1.2])
                        )
                        .data (tnt.board.track.data.sync()
                            .retriever (function () {
                                return [
                                    {pos : 200, val: 0.5},
                                    {pos : 355, val: 0.8}
                                ];
                            })
                        );
                - name : line
                  path : tnt.board.track.feature
                  args : null
                  desc : creates a new line-based feature for a track
                  full : Creates a new line-based feature for a track. The line is defined by a series of points in the track. This points are applied a <i>tension</i> to smooth the connections between the points. This feature expects the data as an array of objects containing numerical <i>pos</i> and <i>val</i> properties, although the name of the properties is configurable. The <i>pos</i> property refers to the x-position of each point in the <a href="#Track">track</a> and the <i>val</i> property refers to the height of the points in the <a href="#Track">track</a> and expects a number in the <i>y-axis</i> <a href="#domain">domain</a> (by default, between 0 and 1).
                  example : |
                    var line_track = tnt.board.track()
                        .display (tnt.board.trac.feature.line())
                        .data (tnt.board.track.data.sync()
                            .retriever (function () {
                                return [
                                    {pos : 200, val: 0.5},
                                    {pos : 355, val: 0.8}
                                    // ...
                                ];
                            })
                        );

                - name : area
                  path : tnt.board.track.feature
                  args : null
                  desc : creates a new area-based feature for a track
                  full : Creates a new area-based feature for a track. This feature is based on the tnt.board.track.feature.<a href="#line">line</a> feature but coloring the area behind the curve.
                  example : |
                    var line_track = tnt.board.track()
                        .display (tnt.board.track.feature.area())
                        .data (tnt.board.track.data.sync()
                            .retriever (function () {
                                return [
                                    {pos : 200, val: 0.5},
                                    {pos : 355, val: 0.8}
                                    // ...
                                ];
                            })
                        );

                - name : vline
                  path : tnt.board.track.feature
                  args : null
                  desc : creates a feature that displays vertical lines in the specified positions
                  full : Creates a feature that displays vertical lines in the specified positions. It expects an array of objects having a field representing the x-coordinate of the lines in the track. This value is the same one specified in the <a href="#index">index</a> property of the <a href="#Display">display</a>
                  example : |
                    var vlines_track = tnt.board.track()
                        .display (tnt.board.track.feature.vline())
                        .data (tnt.board.track.data.sync(
                            .index (function (d) {
                                return d.pos;
                            })
                            .retriever (function () {
                                return [{pos: 15}, {pos: 30}, {pos: 100}];
                            })
                        ));
